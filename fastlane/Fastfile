default_platform :mac

after_all do
  debug
end

platform :mac do
  lane :bump do
    build_number = sh("date +%s").strip
    project_path = '../CrunchyGIF.xcodeproj'

    fastlane_require 'xcodeproj'
    xcproj = Xcodeproj::Project.open(project_path)

    xcproj.targets.each do |target|
      target.build_configuration_list.set_setting('CURRENT_PROJECT_VERSION', build_number)
    end
    xcproj.save
  end

  lane :release_app_store do
    match(
      type: 'appstore',
      additional_cert_types: [ 'mac_installer_distribution' ]
    )

    # START: magic that is mostly project specific
    mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    specifier = mapping[ENV['MATCH_APP_IDENTIFIER']]
    ENV['GYM_XCARGS'] = "CODE_SIGN_IDENTITY=\"Apple Distribution\" PROVISIONING_PROFILE_SPECIFIER=\"#{specifier}\""
    # END: magic that is mostly project specific

    gym(
      scheme: 'CrunchyGIF',
      output_directory: 'build/appstore',
      export_method: 'app-store',
    )

    deliver
  end

  lane :release_developer_id do
    match(
      type: 'developer_id',
      additional_cert_types: [ 'developer_id_installer',
      ]
    )

    # START: magic that is mostly project specific
    mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    specifier = mapping[ENV['MATCH_APP_IDENTIFIER']]
    ENV['GYM_XCARGS'] = "CODE_SIGN_IDENTITY=\"Developer ID Application\" PROVISIONING_PROFILE_SPECIFIER=\"#{specifier}\""
    # END: magic that is mostly project specific

    gym(
      scheme: 'CrunchyGIFDeveloperID',
      export_method: 'developer-id',
      output_directory: 'build/developerid',
      skip_package_pkg: true
    )

    # TODO: Do notarization
  end
end
